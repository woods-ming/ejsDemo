{
    "题目": "Java",
    "摘要": "从零开始学习Java",
    "关键字": "Java入门",
    "正文": {
        "chapters": [
            
            {
                "name": "四、Spring框架",
                "sections": [
                    {
                        "name": "1.简介",
                        "blocks": [
                            {
                                "key": "定位",
                                "description": "解决企业级应用开发的复杂性，是一站式、轻量级解决方案"
                            },
                            {
                                "key": "特点",
                                "description": "模块化，可以选择使用需要的模块；源码很经典"
                            },
                            {
                                "key": "口号",
                                "description": "我负责管理架构，你关注应用逻辑"
                            },
                            {
                                "key": "受益",
                                "description": "写Java方法操作数据库事务，而不必处理事务接口；<br />写Java方法实现remote procedure，而不必处理remote api；<br />写Java方法实现management operation，而不必处理Jmx api；<br />写Java方法实现message handler，而不必处理Jms api；"
                            },
                            {
                                "key": "控制反转：依赖注入",
                                "description": "协调对象之间的依赖关系（组织部长）"
                            },
                            {
                                "key": "AOP",
                                "description": "逻辑分类管理"
                            },
                            {
                                "key": "容器",
                                "description": "管理应用对象的配置和生命周期（根据图纸，创建和组合积木）"
                            },
                            {
                                "key": "框架",
                                "description": "将各种组件装配到一起，构成完整的应用程序"
                            }
                        ]
                    },
                    {
                        "name": "2.模块介绍",
                        "blocks": [
                            {
                                "key": "基础部分",
                                "description": "<code>spring-core</code>核心工具类 <code>spring-beans</code> 提供依赖注入和bean工厂"
                            },
                            {
                                "key": "上下文",
                                "description": "<code>spring-context</code>运行时信息 <code>spring-context-support</code>集成第三方类"
                            },
                            {
                                "key": "面向方面",
                                "description": "<code>spring-aop</code>代理AOP <code>spring-aspects</code>集成AspectJ"
                            },
                            {
                                "key": "工具类",
                                "description": "<code>spring-instrument</code>服务器代理 <code>spring-instrument-tomcat</code>集成Tomcat连接池"
                            },
                            {
                                "key": "消息组件",
                                "description": "<code>spring-messaging</code> 可通过注解来映射消息"
                            },
                            {
                                "key": "数据访问",
                                "description": "<code>spring-jdbc</code>数据库 <code>spring-tx</code>事务 <code>spring-orm</code>对象关系映射 <code>spring-oxm</code>对象XML映射 <code>spring-jms</code>消息生产和消费"
                            },
                            {
                                "key": "Web",
                                "description": "<code>spring-web</code> <code>spring-webmvc</code> <code>spring-websocket</code> <code>spring-webmvc-portlet</code> 提供Http上下文及界面框架等"
                            },
                            {
                                "key": "单元测试和集成测试",
                                "description": "<code>spring-test</code> 可配合JUnit和TestNG使用"
                            },
                            {
                                "key": "查询管理对象图",
                                "description": "<code>spring-expression</code>"
                            }
                        ]
                    },
                    {
                        "name": "3.容器的使用",
                        "blocks": [
                            {
                                "key": "本质",
                                "description": "applicationContext根据配置文件，创建和管理对象"
                            },
                            {
                                "key": "实现原理",
                                "description": "读取配置文件，利用java的反射机制实现工厂类，自动创建和组装对象"
                            },
                            {
                                "key": "IOC的配置方式",
                                "description": "xml：默认配置文件为<code>applicationContext.xml</code> <br /> 注解"
                            },
                            {
                                "key": "实现Aware接口",
                                "description": "applicationContext在创建对象时，注入指定的环境信息（使对象可以使用环境信息）"
                            },
                            {
                                "key": "自动装配",
                                "description": "<code>default-autowire=\"no\"</code> 不自动装配 <br /><code>default-autowire=\"byName\"</code> 检查成员变量，根据名称（在context中）匹配对象并赋值 <br /><code>default-autowire=\"byType\"</code> 检查成员变量，根据类型（在context中）匹配对象并赋值 <br /><code>default-autowire=\"constructor\"</code> 检查构造函数的参数，根据类型（在context中）匹配对象并赋值"
                            },
                            {
                                "key": "bean的作用域",
                                "description": "<code>scope=\"singleton\"</code> 容器内唯一（默认） <br /><code>scope=\"prototype\"</code> 创建新的 <br /><code>scope=\"request\"</code> 请求过程中唯一 <br /><code>scope=\"session\"</code> 会话过程唯一 <br /><code>scope=\"globalSession\"</code> （portlet）会话过程唯一 "
                            },
                            {
                                "key": "加载资源文件",
                                "description": "<code>Resource resource = applicationContext.getResource(\"文件位置\")</code> 加载资源文件 <br />位置格式：<code>ClassPath: / File: / Http:</code>"
                            }
                        ],
                        "codeSnippets": [
                            {
                                "description": "初始化ApplicationContext",
                                "url": "/codeSnippets/java/spring_initContext.java"
                            },
                            {
                                "description": "applicationContext.xml配置范例",
                                "url": "/codeSnippets/java/spring_applicationContext.xml"
                            }
                        ]
                    },
                    {
                        "name": "4.AOP的使用",
                        "blocks": [
                            {
                                "key": "本质",
                                "description": "同一个时间点大家要做同样的事情，为了不重复做这件事情，大家发出同样的事件通知，交给一个公共的逻辑来处理"
                            },
                            {
                                "key": "AOP 的配置方式",
                                "description": "这个类（方面）负责处理：哪些操作（业务方法）在什么时间（切入点），需要做的事情（切入方法）"
                            },
                            {
                                "key": "支持 Mix-in",
                                "description": "用AOP的方式，给匹配的类，增加父类"
                            }
                        ],
                        "codeSnippets": [
                            {
                                "description": "AOP配置范例",
                                "url": "/codeSnippets/java/spring_aop.xml"
                            }
                        ]
                    },
                    {
                        "name": "5.常见出错原因",
                        "blocks": [
                            {
                                "key": "相关包未引入",
                                "description": "必须的包 <code>spring-core</code> <code>spring-beans</code> <code>spring-context</code> <code>spring-context-support</code> <code>spring-expression</code> <code>commons-logging</code>"
                            }
                        ]
                    }
                ]
            },
            {
                "name": "五、Maven构建",
                "sections": [
                    {
                        "name": "1.简介",
                        "blocks": [
                            {
                                "key": "作用",
                                "description": "管理依赖，构建项目。（相当于 npm + gulp）"
                            },
                            {
                                "key": "项目构建过程",
                                "description": "清理、编译、测试、打包、集成测试、验证、部署"
                            },
                            {
                                "key": "构件识别",
                                "description": "<code>groupId</code> 公司网址的反写.项目名 <br /><code>artifactId</code> 项目名-模块名 <br /><code>version</code> 版本号"
                            },
                            {
                                "key": "仓库",
                                "description": "存放构件，分为本地仓库和远程仓库（与nodejs相似）"
                            },
                            {
                                "key": "ClassPath",
                                "description": "相当于.net中的第三方类库引用"
                            },
                            {
                                "key": "Dependency Scope",
                                "description": "compile: 编译、测试、运行 <br/>provided: 编译、测试 <br/>runtime: 测试、运行 <br/>test: 测试 <br/>compile: 编译、测试"
                            },
                            {
                                "key": "重要的pom.xml",
                                "description": "在项目根目录，描述构建信息（相当于 package.json）"
                            }
                        ]
                    },
                    {
                        "name": "2.配置",
                        "blocks": [
                            {
                                "key": "Eclipse配置",
                                "description": "Maven\\Installations：选择Maven的安装目录 <br />Maven\\User Settings：选择Maven本地仓库的Settings.xml"
                            }
                        ],
                        "codeSnippets": [
                            {
                                "description": "仓库配置",
                                "url": "/codeSnippets/java/maven_repositorySettings.xml"
                            },
                            {
                                "description": "pom配置",
                                "url": "/codeSnippets/java/maven_pom.xml"
                            }
                        ]
                    },
                    {
                        "name": "3.使用",
                        "blocks": [
                            {
                                "key": "常用命令",
                                "description": "<code>mvn compile</code>编译 <br /><code>mvn package</code>打包 <br /><code>mvn test</code>单元测试 <br /><code>mvn clean</code>删除target <br /><code>mvn archetype:generate</code>生成标准目录 <br /><code>mvn install</code>打包到本地仓库（供其它项目引用） <br />"
                            },
                            {
                                "key": "Maven生命周期",
                                "description": "<code>clean</code> 清理项目 <br /><code>default</code> 构建项目 <br /><code>site</code> 生成项目站点"
                            }
                        ]
                    }                    
                ]
            },
            {
                "name": "六、工作流Activiti",
                "sections": [
                    {
                        "name": "1.环境搭建",
                        "blocks": [
                            {
                                "key": "下载",
                                "description": "http://activiti.org/download.html"
                            },
                            {
                                "key": "环境要求",
                                "description": "jdk1.7以上 & Tomcat7"
                            },
                            {
                                "key": "查看Demo",
                                "description": "将下载的 activiti-explorer.war 部署到Tomcat <br />帐号：kermit/kermit"
                            }
                        ]
                    },
                    {
                        "name": "2.基础概念",
                        "blocks": [
                            {
                                "key": "BPMN 2.0",
                                "description": "Business Process Model and Notation 是工作流厂商遵守的流程定义标准"
                            },
                            {
                                "key": "使用方式",
                                "description": "引入 jar 文件 <br />独立服务器"
                            },
                            {
                                "key": "流程设计工具",
                                "description": "图形设计器 <br />表格设计器"
                            },
                            {
                                "key": "工作流原理",
                                "description": "流程由 Task 组成，由事件驱动，Task 分配给 用户/角色 完成（核心是序列图）"
                            },
                            {
                                "key": "任务状态",
                                "description": "未签收、办理中、执行中、已完成"
                            },
                            {
                                "key": "事件",
                                "description": "捕获：空心圆 <br />触发：实心圆"
                            }
                        ]
                    },
                    {
                        "name": "3.部署方式",
                        "blocks": [
                            {
                                "key": "Activiti Explorer",
                                "description": "在 Tomcat 中运行 activiti-explorer.war <br />准备好xxx.bpmn20.xml <br />登录后，在 ‘管理/部署包/添加新的部署包’ 中上传"
                            },
                            {
                                "key": "编程方式",
                                "description": "<code>repositoryService.createDeployment().addClasspathResource(\"org/activiti/test/VacationRequest.bpmn20.xml\").deploy();</code>"
                            }
                        ]
                    }                    
                ]
            }
        ]
    },
    "注释": [
        "",
        ""
    ],
    "参考文献": []
}