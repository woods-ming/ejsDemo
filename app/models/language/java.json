{
    "题目": "初学Java",
    "摘要": "从零开始学习Java",
    "关键字": "Java入门",
    "正文": {
        "chapters": [
            {
                "name": "一、搭建开发环境",
                "sections": [
                    {
                        "name": "1.安装Jdk",
                        "blocks": [
                            {
                                "key": "包含内容",
                                "description": "JRE、编译器、打包工具、文档生成器、调试器、头文件生成器、反汇编器、监控工具等"
                            },
                            {
                                "key": "下载",
                                "description": "http://www.oracle.com/technetwork/java/javase/downloads/index.html"
                            },
                            {
                                "key": "JAVA_HOME",
                                "description": "C:\\Program Files\\Java\\jdk1.7.0"
                            },
                            {
                                "key": "CLASSPATH",
                                "description": ".;%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar;"
                            },
                            {
                                "key": "Path",
                                "description": "%JAVA_HOME%\\bin;%JAVA_HOME%\\jre\\bin;"
                            },
                            {
                                "key": "查看java版本",
                                "description": "java -version"
                            }
                        ]
                    },
                    {
                        "name": "2.安装Tomcat",
                        "blocks": [
                            {
                                "key": "下载（Core:zip）",
                                "description": "http://tomcat.apache.org/download-80.cgi"
                            },
                            {
                                "key": "绿色",
                                "description": "解压到不需要Admin权限的目录"
                            },
                            {
                                "key": "CATALINA_HOME",
                                "description": "F:\\Downloads\\Tomcat\\apache-tomcat-8.0.22"
                            },
                            {
                                "key": "启动",
                                "description": "<kbd>双击</kbd> ‘安装目录\\bin\\startup.bat’ || 打开浏览器 ‘http://localhost:8080/’"
                            }
                        ]
                    },
                    {
                        "name": "3.安装Eclipse",
                        "blocks": [
                            {
                                "key": "下载",
                                "description": "http://www.eclipse.org/downloads/"
                            },
                            {
                                "key": "绿色",
                                "description": "解压到不需要Admin权限的目录"
                            },
                            {
                                "key": "工作目录",
                                "description": "存放代码的默认文件夹"
                            },
                            {
                                "key": "配置运行环境",
                                "description": "Preference\\Java\\Installed JREs：选择jdk安装目录"
                            },
                            {
                                "key": "配置Tomcat",
                                "description": "Preference\\Server\\Runtime Enviorments：添加Apache Tomcat v8.0及安装目录 || JRE选择jdk开头的"
                            },
                            {
                                "key": "配置Content Assist",
                                "description": "Preference\\Java\\Content Assist\\Auto activacation：输入'.abc...z'"
                            },
                            {
                                "key": "打开Tomcat",
                                "description": "Window\\Show View\\Servers：<kbd>右键</kbd> start"
                            },
                            {
                                "key": "配置编码格式",
                                "description": "General\\WorkSpace\\Text file encoding：UTF-8 <br />Web\\JSP Files\\Encoding：ISO 10646/Unicode(UTF-8)"
                            },
                            {
                                "key": "关闭拼写检查",
                                "description": "General\\Editors\\Text Editors\\Spelling：禁用拼写检查"
                            },
                            {
                                "key": "安装插件",
                                "description": "Help\\Eclipse Marketplace"
                            }
                        ]
                    },
                    {
                        "name": "4.安装Maven",
                        "blocks": [
                            {
                                "key": "下载",
                                "description": "http://maven.apache.org/download.cgi"
                            },
                            {
                                "key": "绿色",
                                "description": "解压到不需要Admin权限的目录"
                            },
                            {
                                "key": "M2_HOME",
                                "description": "G:\\SoftWare\\apache-maven-3.3.3"
                            },
                            {
                                "key": "Path",
                                "description": "%M2_HOME%\\bin;"
                            },
                            {
                                "key": "测试",
                                "description": "<code>mvn -v</code>"
                            },
                            {
                                "key": "注意",
                                "description": "必须配合jdk1.7"
                            }
                        ]
                    }
                ]
            },
            {
                "name": "二、Jsp（方便生成Html的servlet，由Tomcat自动解析）",
                "sections": [
                    {
                        "name": "1.Hello World",
                        "blocks": [
                            {
                                "key": "创建项目",
                                "description": "Web\\Dynamic Web Project"
                            },
                            {
                                "key": "创建页面",
                                "description": "WebContent\\某目录，<kbd>右键</kbd> JSP File"
                            },
                            {
                                "key": "编写代码",
                                "description": "跟Asp差不多，语句用<code><% %></code>，声明用<code><%! %></code>，表达式用<code><%= %></code>"
                            },
                            {
                                "key": "九大内置对象",
                                "description": "request，response，session，application，out（输出），page，pageContext，config，exception"
                            },
                            {
                                "key": "部署到Tomcat",
                                "description": "Server\\Add and Remove...，添加当前项目"
                            },
                            {
                                "key": "运行",
                                "description": "Window\\Show View\\Servers：<kbd>右键</kbd> start || 打开浏览器 ‘http://localhost:8080/目录/xxx.jsp’"
                            },
                            {
                                "key": "（修改端口号）",
                                "description": "并列工程目录的Servers\\server.xml：找到Connector\\port，进行修改"
                            },
                            {
                                "key": "（智能提示）",
                                "description": "快捷键：<kbd>Alt + /</kbd> <br /> 导入运行时类库：<kbd>项目右键</kbd> Build Path\\Config Build Path\\Java Build Path\\Add Library\\Server Runtime"
                            },
                            {
                                "key": "（解决中文乱码）",
                                "description": "post：<code>request.setCharacterEncoding(\"utf-8\");</code><br /> get：修改Tomcat的server.xml的配置 <code>URIEncoding=\"utf-8\"</code>"
                            }
                        ]
                    },
                    {
                        "name": "2.使用JavaBean",
                        "blocks": [
                            {
                                "key": "四大特点",
                                "description": "public， 无参构造函数， 私有属性， get/set访问器（符合特定规范的java类，用于做Model层）"
                            },
                            {
                                "key": "<code>&lt;jsp:useBean /&gt;</code>",
                                "description": "实例化Bean，并将Bean作为成员，挂到scope对象上（它就具有了scope对象的生存期）"
                            },
                            {
                                "key": "<code>&lt;jsp:setProperty /&gt;</code>",
                                "description": "给指定Bean的属性赋值（从表单或Request的池子中捞数据，与.net MVC中的模型绑定极其相似）"
                            },
                            {
                                "key": "<code>&lt;jsp:getProperty /&gt;</code>",
                                "description": "读取指定Bean的属性值"
                            },
                            {
                                "key": "本质",
                                "description": "jsp要经常使用Bean，因此特定开发出一系列语法技巧"
                            }
                        ]
                    },
                    {
                        "name": "3.使用Jsp指令",
                        "blocks": [
                            {
                                "key": "<code><%@ include file %></code>",
                                "description": "嵌入外部文件的原始代码（物理替换）"
                            },
                            {
                                "key": "<code><%@ page import %></code>",
                                "description": "相当于 c#的<code>using</code>"
                            },
                            {
                                "key": "<code><%@ page contentType %></code>",
                                "description": "当前页面使用的字符编码（推荐utf-8）"
                            },
                            {
                                "key": "本质",
                                "description": "编译Jsp页面时，执行的逻辑"
                            }
                        ]
                    },
                    {
                        "name": "4.使用Jsp动作",
                        "blocks": [
                            {
                                "key": "<code>&lt;jsp:include page /&gt;</code>",
                                "description": "嵌入外部文件的执行结果（逻辑调用）"
                            },
                            {
                                "key": "<code>&lt;jsp:forward page /&gt;</code>",
                                "description": "服务器跳转（交给指定Jsp页面处理请求）"
                            },
                            {
                                "key": "<code>&lt;jsp:param name value /&gt;</code>",
                                "description": "作为forward动作的子标签，给request对象添加请求参数（相当于 c#的<code>routeValues</code>）"
                            },
                            {
                                "key": "本质",
                                "description": "运行Jsp页面时，调用的逻辑"
                            }
                        ]
                    },
                    {
                        "name": "5.什么是Servlet",
                        "blocks": [
                            {
                                "key": "定义",
                                "description": "在服务端运行的小程序，没有程序入口，由servlet容器调用"
                            },
                            {
                                "key": "处理流程",
                                "description": "1.servlet容器（如：Tomcat）接收 Http请求 <br />2.容器根据 url映射，调用对应的servlet <br />3.servlet运行完毕，将结果返回给容器 <br />4.容器将结果返回给请求方"
                            },
                            {
                                "key": "本质",
                                "description": "一个实现了特定接口的基类，以接口为规范在服务器运行"
                            },
                            {
                                "key": "相关package",
                                "description": "<code>javax.servlet</code> <code>javax.servlet.http</code> <code>javax.servlet.annotation</code> <code>javax.servlet.descriptor</code>"
                            }
                        ]
                    }
                ]
            },
            {
                "name": "三、Java API",
                "sections": [
                    {
                        "name": "1.集合框架",
                        "blocks": [
                            {
                                "key": "Collection接口",
                                "description": "List接口 &rarr; ArrayList子类 / Vector子类 （可以重复） <br /> Set接口 &rarr; HashSet （不能重复） <br /> Queue接口 &rarr; LinkedList  &nbsp; "
                            },
                            {
                                "key": "Map接口",
                                "description": "HashMap / HashTable （键值对）"
                            },
                            {
                                "key": "工具类",
                                "description": "Collections, Comparable, Comparator"
                            }
                        ]
                    }
                ]
            },
            {
                "name": "四、Spring框架",
                "sections": [
                    {
                        "name": "1.简介",
                        "blocks": [
                            {
                                "key": "定位",
                                "description": "解决企业级应用开发的复杂性，是一站式、轻量级解决方案"
                            },
                            {
                                "key": "特点",
                                "description": "模块化，可以选择使用需要的模块；源码很经典"
                            },
                            {
                                "key": "口号",
                                "description": "我负责管理架构，你关注应用逻辑"
                            },
                            {
                                "key": "受益",
                                "description": "写Java方法操作数据库事务，而不必处理事务接口；<br />写Java方法实现remote procedure，而不必处理remote api；<br />写Java方法实现management operation，而不必处理Jmx api；<br />写Java方法实现message handler，而不必处理Jms api；"
                            },
                            {
                                "key": "控制反转：依赖注入",
                                "description": "协调对象之间的依赖关系（组织部长）"
                            },
                            {
                                "key": "AOP",
                                "description": "逻辑分类管理"
                            },
                            {
                                "key": "容器",
                                "description": "管理应用对象的配置和生命周期（根据图纸，创建和组合积木）"
                            },
                            {
                                "key": "框架",
                                "description": "将各种组件装配到一起，构成完整的应用程序"
                            }
                        ]
                    },
                    {
                        "name": "2.模块介绍",
                        "blocks": [
                            {
                                "key": "基础部分",
                                "description": "<code>spring-core</code>核心工具类 <code>spring-beans</code> 提供依赖注入和bean工厂"
                            },
                            {
                                "key": "上下文",
                                "description": "<code>spring-context</code>运行时信息 <code>spring-context-support</code>集成第三方类"
                            },
                            {
                                "key": "面向方面",
                                "description": "<code>spring-aop</code>代理AOP <code>spring-aspects</code>集成AspectJ"
                            },
                            {
                                "key": "工具类",
                                "description": "<code>spring-instrument</code>服务器代理 <code>spring-instrument-tomcat</code>集成Tomcat连接池"
                            },
                            {
                                "key": "消息组件",
                                "description": "<code>spring-messaging</code> 可通过注解来映射消息"
                            },
                            {
                                "key": "数据访问",
                                "description": "<code>spring-jdbc</code>数据库 <code>spring-tx</code>事务 <code>spring-orm</code>对象关系映射 <code>spring-oxm</code>对象XML映射 <code>spring-jms</code>消息生产和消费"
                            },
                            {
                                "key": "Web",
                                "description": "<code>spring-web</code> <code>spring-webmvc</code> <code>spring-websocket</code> <code>spring-webmvc-portlet</code> 提供Http上下文及界面框架等"
                            },
                            {
                                "key": "单元测试和集成测试",
                                "description": "<code>spring-test</code> 可配合JUnit和TestNG使用"
                            },
                            {
                                "key": "查询管理对象图",
                                "description": "<code>spring-expression</code>"
                            }
                        ]
                    },
                    {
                        "name": "3.容器的使用",
                        "blocks": [
                            {
                                "key": "本质",
                                "description": "applicationContext根据配置文件，创建和管理对象"
                            },
                            {
                                "key": "实现原理",
                                "description": "读取配置文件，利用java的反射机制实现工厂类，自动创建和组装对象"
                            },
                            {
                                "key": "IOC的配置方式",
                                "description": "xml：默认配置文件为<code>applicationContext.xml</code> <br /> 注解"
                            },
                            {
                                "key": "实现Aware接口",
                                "description": "applicationContext在创建对象时，注入指定的环境信息（使对象可以使用环境信息）"
                            },
                            {
                                "key": "自动装配",
                                "description": "<code>default-autowire=\"no\"</code> 不自动装配 <br /><code>default-autowire=\"byName\"</code> 检查成员变量，根据名称（在context中）匹配对象并赋值 <br /><code>default-autowire=\"byType\"</code> 检查成员变量，根据类型（在context中）匹配对象并赋值 <br /><code>default-autowire=\"constructor\"</code> 检查构造函数的参数，根据类型（在context中）匹配对象并赋值"
                            },
                            {
                                "key": "bean的作用域",
                                "description": "<code>scope=\"singleton\"</code> 容器内唯一（默认） <br /><code>scope=\"prototype\"</code> 创建新的 <br /><code>scope=\"request\"</code> 请求过程中唯一 <br /><code>scope=\"session\"</code> 会话过程唯一 <br /><code>scope=\"globalSession\"</code> （portlet）会话过程唯一 "
                            },
                            {
                                "key": "加载资源文件",
                                "description": "<code>Resource resource = applicationContext.getResource(\"文件位置\")</code> 加载资源文件 <br />位置格式：<code>ClassPath: / File: / Http:</code>"
                            }
                        ],
                        "codeSnippets": [
                            {
                                "description": "初始化ApplicationContext",
                                "url": "/codeSnippets/java/spring_initContext.java"
                            },
                            {
                                "description": "applicationContext.xml配置范例",
                                "url": "/codeSnippets/java/spring_applicationContext.xml"
                            }
                        ]
                    },
                    {
                        "name": "4.AOP的使用",
                        "blocks": [
                            {
                                "key": "本质",
                                "description": "同一个时间点大家要做同样的事情，为了不重复做这件事情，大家发出同样的事件通知，交给一个公共的逻辑来处理"
                            },
                            {
                                "key": "AOP 的配置方式",
                                "description": "这个类（方面）负责处理：哪些操作（业务方法）在什么时间（切入点），需要做的事情（切入方法）"
                            },
                            {
                                "key": "支持 Mix-in",
                                "description": "用AOP的方式，给匹配的类，增加父类"
                            }
                        ],
                        "codeSnippets": [
                            {
                                "description": "AOP配置范例",
                                "url": "/codeSnippets/java/spring_aop.xml"
                            }
                        ]
                    },
                    {
                        "name": "5.常见出错原因",
                        "blocks": [
                            {
                                "key": "相关包未引入",
                                "description": "必须的包 <code>spring-core</code> <code>spring-beans</code> <code>spring-context</code> <code>spring-context-support</code> <code>spring-expression</code> <code>commons-logging</code>"
                            }
                        ]
                    }
                ]
            },
            {
                "name": "五、Maven构建",
                "sections": [
                    {
                        "name": "1.简介",
                        "blocks": [
                            {
                                "key": "作用",
                                "description": "管理依赖，构建项目。（相当于 npm + gulp）"
                            },
                            {
                                "key": "项目构建过程",
                                "description": "清理、编译、测试、打包、集成测试、验证、部署"
                            },
                            {
                                "key": "构件识别",
                                "description": "<code>groupId</code> 公司网址的反写.项目名 <br /><code>artifactId</code> 项目名-模块名 <br /><code>version</code> 版本号"
                            },
                            {
                                "key": "仓库",
                                "description": "存放构件，分为本地仓库和远程仓库（与nodejs相似）"
                            },
                            {
                                "key": "ClassPath",
                                "description": "相当于.net中的第三方类库引用"
                            },
                            {
                                "key": "Dependency Scope",
                                "description": "compile: 编译、测试、运行 <br/>provided: 编译、测试 <br/>runtime: 测试、运行 <br/>test: 测试 <br/>compile: 编译、测试"
                            },
                            {
                                "key": "重要的pom.xml",
                                "description": "在项目根目录，描述构建信息（相当于 package.json）"
                            }
                        ]
                    },
                    {
                        "name": "2.配置",
                        "blocks": [
                            {
                                "key": "Eclipse配置",
                                "description": "Maven\\Installations：选择Maven的安装目录 <br />Maven\\User Settings：选择Maven本地仓库的Settings.xml"
                            }
                        ],
                        "codeSnippets": [
                            {
                                "description": "仓库配置",
                                "url": "/codeSnippets/java/maven_repositorySettings.xml"
                            },
                            {
                                "description": "pom配置",
                                "url": "/codeSnippets/java/maven_pom.xml"
                            }
                        ]
                    },
                    {
                        "name": "3.使用",
                        "blocks": [
                            {
                                "key": "常用命令",
                                "description": "<code>mvn compile</code>编译 <br /><code>mvn package</code>打包 <br /><code>mvn test</code>单元测试 <br /><code>mvn clean</code>删除target <br /><code>mvn archetype:generate</code>生成标准目录 <br /><code>mvn install</code>打包到本地仓库（供其它项目引用） <br />"
                            },
                            {
                                "key": "Maven生命周期",
                                "description": "<code>clean</code> 清理项目 <br /><code>default</code> 构建项目 <br /><code>site</code> 生成项目站点"
                            }
                        ]
                    }                    
                ]
            },
            {
                "name": "六、工作流Activiti",
                "sections": [
                    {
                        "name": "1.环境搭建",
                        "blocks": [
                            {
                                "key": "下载",
                                "description": "http://activiti.org/download.html"
                            },
                            {
                                "key": "环境要求",
                                "description": "jdk1.7以上 & Tomcat7"
                            },
                            {
                                "key": "查看Demo",
                                "description": "将下载的 activiti-explorer.war 部署到Tomcat <br />帐号：kermit/kermit"
                            }
                        ]
                    },
                    {
                        "name": "2.基础概念",
                        "blocks": [
                            {
                                "key": "BPMN 2.0",
                                "description": "Business Process Model and Notation 是工作流厂商遵守的流程定义标准"
                            },
                            {
                                "key": "使用方式",
                                "description": "引入 jar 文件 <br />独立服务器"
                            },
                            {
                                "key": "流程设计工具",
                                "description": "图形设计器 <br />表格设计器"
                            },
                            {
                                "key": "工作流原理",
                                "description": "流程由 Task 组成，由事件驱动，Task 分配给 用户/角色 完成（核心是序列图）"
                            },
                            {
                                "key": "任务状态",
                                "description": "未签收、办理中、执行中、已完成"
                            },
                            {
                                "key": "事件",
                                "description": "捕获：空心圆 <br />触发：实心圆"
                            }
                        ]
                    },
                    {
                        "name": "3.部署方式",
                        "blocks": [
                            {
                                "key": "Activiti Explorer",
                                "description": "在 Tomcat 中运行 activiti-explorer.war <br />准备好xxx.bpmn20.xml <br />登录后，在 ‘管理/部署包/添加新的部署包’ 中上传"
                            },
                            {
                                "key": "编程方式",
                                "description": "<code>repositoryService.createDeployment().addClasspathResource(\"org/activiti/test/VacationRequest.bpmn20.xml\").deploy();</code>"
                            }
                        ]
                    }                    
                ]
            }
        ]
    },
    "注释": [
        "",
        ""
    ],
    "参考文献": []
}