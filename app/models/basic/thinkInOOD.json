{
    "题目": "《OOD启思录》",
    "摘要": "用面向对象的思维方式去思考",
    "关键字": "OOD, 面向对象",
    "正文": {
        "chapters": [
            {
                "name": "",
                "sections": [
                    {
                        "name": "1.本书的目的",
                        "blocks": [
                            {
                                "key": "设计改良",
                                "description": "通过折中取舍，使新的设计优于旧的设计"
                            },
                            {
                                "key": "“优于”的含义",
                                "description": "程序更容易维护（可读性、可扩展性）"
                            }
                        ]
                    },
                    {
                        "name": "2.开发模型",
                        "blocks": [
                            {
                                "key": "瀑布模型",
                                "description": "分析 → 设计 → 编码 → 测试 → 维护（易于跟踪，但牵一发而动全身）"
                            },
                            {
                                "key": "迭代模型",
                                "description": "与瀑布相比，可以向上一个步骤回溯（适应变化，但不容易计划和跟踪）"
                            },
                            {
                                "key": "原型模型",
                                "description": "以非正规的方式快速实现，就像打草稿（及早发现问题，但要付出额外工作量）"
                            }
                        ]
                    },
                    {
                        "name": "3.软件危机的原因？",
                        "blocks": [
                            {
                                "key": "根本复杂性",
                                "description": "软件规模庞大、思想抽象、需求变化快"
                            },
                            {
                                "key": "解决方案",
                                "description": "编程模型、思考方法、工具"
                            },
                            {
                                "key": "",
                                "description": "随社会发展，根本复杂性上升；当解决方案跟不上时，软件危机就爆发了！"
                            }
                        ]
                    },
                    {
                        "name": "4.如何解决软件危机？",
                        "blocks": [
                            {
                                "key": "降低根本复杂性",
                                "description": "简化业务需求、复用已有的软件"
                            },
                            {
                                "key": "改进解决方案",
                                "description": "改进开发模型，在更抽象的层次上思考，使用更优秀的工具"
                            },
                            {
                                "key": "",
                                "description": "在当前阶段，抽象思考把我们带到了面向对象的层次（面向服务、面向方面！？）"
                            }
                        ]
                    },
                    {
                        "name": "5.面向对象的砖头瓦块",
                        "blocks": [
                            {
                                "key": "数据隐藏在类的内部",
                                "description": "将功能与数据的依赖关系，限制在类的范围内"
                            },
                            {
                                "key": "使用者 → 类的公有接口",
                                "description": "单向依赖，确保类能够被复用"
                            },
                            {
                                "key": "接口精炼，以用户需求为驱动",
                                "description": "便于理解，且易于复用"
                            },
                            {
                                "key": "类表示一个关键抽象",
                                "description": "单一职责，描述清晰"
                            },
                            {
                                "key": "抽象类",
                                "description": "对类进行分类"
                            },
                            {
                                "key": "实现常用的最小接口",
                                "description": "拷贝、相等性判断、ToString()"
                            }
                        ]
                    },
                    {
                        "name": "6.应用程序布局",
                        "blocks": [
                            {
                                "key": "面向过程",
                                "description": "集中化控制"
                            },
                            {
                                "key": "面向对象",
                                "description": "分布式关联"
                            }
                        ]
                    },
                    {
                        "name": "7.面向对象的陷阱",
                        "blocks": [
                            {
                                "key": "全能类",
                                "description": "职责太多"
                            },
                            {
                                "key": "泛滥成灾的类",
                                "description": "职责太散（多个类完成了一个职责） || 系统边界外的类（没意义）"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    "注释": [
        ""
    ],
    "参考文献": []
}