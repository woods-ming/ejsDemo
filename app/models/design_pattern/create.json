{
    "题目": "创建型模式",
    "摘要": "解决创建对象时遇到的问题",
    "关键字": "Singleton Prototype FactoryMethod AbstractFactory Builder",
    "正文": {
        "chapters": [
            {
                "name": "一、Singleton",
                "sections": [
                    {
                        "name": "1.问题",
                        "blocks": [
                            {
                                "key": "控制",
                                "description": "实例个数"
                            },
                            {
                                "key": "例子",
                                "description": "在一个Web应用中，只有一个Application对象"
                            }
                        ]
                    },
                    {
                        "name": "2.解决思路",
                        "blocks": [
                            {
                                "key": "禁用对象创建",
                                "description": "隐藏构造函数"
                            },
                            {
                                "key": "提供访问点",
                                "description": "使用静态成员"
                            },
                            {
                                "key": "懒加载",
                                "description": "使用时，判断没有再创建"
                            },
                            {
                                "key": "避免多线程判断错误",
                                "description": "双检查"
                            }
                        ]
                    },
                    {
                        "name": "3.代码示例",
                        "codeSnippets": [
                            {
                                "description": "代码简单，对象预加载，如果没被用到会造成资源浪费",
                                "url": "/codeSnippets/design_pattern/singleton1.java"
                            },
                            {
                                "description": "同步 + 双检查，对象懒加载，初次资源竞争时会降低执行速度",
                                "url": "/codeSnippets/design_pattern/singleton2.java"
                            }
                        ]
                    },
                    {
                        "name": "4.模型图",
                        "images": [
                            {
                                "alt": "确保一个类只有一个示例，并提供全局访问点",
                                "url": "/images/design_pattern/singleton.png"
                            }
                        ]
                    }
                ]
            },
            {
                "name": "二、Prototype",
                "sections": [
                    {
                        "name": "1.问题",
                        "blocks": [
                            {
                                "key": "需要创建",
                                "description": "大量相似对象"
                            },
                            {
                                "key": "属性是扩展点",
                                "description": "需要扩展类的结构"
                            },
                            {
                                "key": "不想重复",
                                "description": "创建实例的逻辑"
                            },
                            {
                                "key": "例子",
                                "description": "在游戏魔兽争霸中，兵营生产的每个兵种的小兵都是一样的"
                            }
                        ]
                    },
                    {
                        "name": "2.解决思路",
                        "blocks": [
                            {
                                "key": "复制",
                                "description": "直接拷贝现有对象"
                            },
                            {
                                "key": "枚举",
                                "description": "每种类型的对象，创建一个原型（用来复制）"
                            }
                        ]
                    },
                    {
                        "name": "3.代码示例",
                        "codeSnippets": [
                            {
                                "description": "",
                                "url": "/codeSnippets/design_pattern/prototype.java"
                            }
                        ]
                    },
                    {
                        "name": "4.模型图",
                        "images": [
                            {
                                "alt": "不用再给属性赋值，通过复制来创建新对象",
                                "url": "/images/design_pattern/prototype.png"
                            }
                        ]
                    }
                ]
            },
            {
                "name": "三、Factory Method",
                "sections": [
                    {
                        "name": "1.问题",
                        "blocks": [
                            {
                                "key": "依赖对象是扩展点",
                                "description": "创建依赖对象的逻辑需要扩展"
                            },
                            {
                                "key": "不想修改",
                                "description": "获取所依赖对象的逻辑（但依赖关系总是变）"
                            },
                            {
                                "key": "例子",
                                "description": "在单位食堂，想吃什么就提前定好菜谱"
                            }
                        ]
                    },
                    {
                        "name": "2.解决思路",
                        "blocks": [
                            {
                                "key": "抽象类",
                                "description": "通过类继承，扩展'创建依赖对象的逻辑'"
                            },
                            {
                                "key": "封装对象创建",
                                "description": "描述一个对象工厂，专门用于创建所依赖对象"
                            }
                        ]
                    },
                    {
                        "name": "3.代码示例",
                        "codeSnippets": [
                            {
                                "description": "",
                                "url": "/codeSnippets/design_pattern/factoryMethod.java"
                            }
                        ]
                    },
                    {
                        "name": "4.模型图",
                        "images": [
                            {
                                "alt": "将创建所依赖对象的过程，交给工厂",
                                "url": "/images/design_pattern/factoryMethod.png"
                            }
                        ]
                    }
                ]
            },
            {
                "name": "四、Abstract Factory",
                "sections": [
                    {
                        "name": "1.问题",
                        "blocks": [
                            {
                                "key": "不想修改",
                                "description": "获取所依赖对象的逻辑（但依赖关系总是变）"
                            },
                            {
                                "key": "还要应对",
                                "description": "所依赖对象的变化（碰巧它的变化局限在自己的父类下）"
                            },
                            {
                                "key": "例子",
                                "description": "在吃货街，想吃什么就找对应的饭馆"
                            }
                        ]
                    },
                    {
                        "name": "2.解决思路",
                        "blocks": [
                            {
                                "key": "封装对象创建",
                                "description": "描述一个对象工厂，专门用于创建所依赖对象"
                            },
                            {
                                "key": "抽象工厂",
                                "description": "将工厂抽象，由该系列的工厂创建不同的对象"
                            }
                        ]
                    },
                    {
                        "name": "3.代码示例",
                        "codeSnippets": [
                            {
                                "description": "",
                                "url": "/codeSnippets/design_pattern/abstractFactory.java"
                            }
                        ]
                    },
                    {
                        "name": "4.模型图",
                        "images": [
                            {
                                "alt": "将可能的依赖对象，交给多个工厂去创建（它们之间可相互替换）",
                                "url": "/images/design_pattern/abstractFactory.png"
                            }
                        ]
                    }
                ]
            },
            {
                "name": "五、Builder",
                "sections": [
                    {
                        "name": "1.问题",
                        "blocks": [
                            {
                                "key": "不想修改",
                                "description": "获取所依赖对象 们 的逻辑（但依赖关系总是变）"
                            },
                            {
                                "key": "不想修改",
                                "description": "所依赖对象 之间的组织关系（但它们不是各自独立，非要组织在一起成为一个更大的对象）"
                            },
                            {
                                "key": "还要应对",
                                "description": "所依赖对象 们 的变化（碰巧它们的变化局限在自己的父类下）"
                            },
                            {
                                "key": "例子",
                                "description": "独立采购食材，选择不同的加工食堂，就可以做出不同口味的菜肴"
                            }
                        ]
                    },
                    {
                        "name": "2.解决思路",
                        "blocks": [
                            {
                                "key": "封装对象创建",
                                "description": "描述一个部件工厂，专门用于创建所依赖的对象 们"
                            },
                            {
                                "key": "封装组合算法",
                                "description": "描述一个组装者，将所依赖的对象 们 组织在一起"
                            },
                            {
                                "key": "抽象工厂",
                                "description": "将工厂抽象，由该系列的工厂创建不同的对象 们"
                            }
                        ]
                    },
                    {
                        "name": "3.代码示例",
                        "codeSnippets": [
                            {
                                "description": "在Abstract Factory的基础上，多了组装环节",
                                "url": "/codeSnippets/design_pattern/builder.java"
                            }
                        ]
                    },
                    {
                        "name": "4.模型图",
                        "images": [
                            {
                                "alt": "将部件的生产和组装分离，使得同样的生产过程能获取不同的产品",
                                "url": "/images/design_pattern/builder.png"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    "注释": [
        "1.总的思路：不直接创建对象，找“某个角色”要对象",
        "2.层层递进：FactoryMethod、AbstractFactory、Builder展示了在现有场景下逐一增加变化点后的解决方案"
    ],
    "参考文献": [
    ]
}