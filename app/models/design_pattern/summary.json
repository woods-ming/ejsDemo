{
    "题目": "设计模式概述",
    "摘要": "介绍设计模式的来龙去脉，要解决的问题及如何使用",
    "关键字": "设计模式 面向对象设计原则 面向对象设计模式",
    "正文": {
        "chapters": [
            {
                "name": "一、了解模式",
                "sections": [
                    {
                        "name": "1.什么是经验？",
                        "blocks": [
                            {
                                "key": "",
                                "description": "经历了一个问题，摸索出解决方法，验证后正确，总结后得到经验"
                            },
                            {
                                "key": "好处",
                                "description": "可靠，且省时、省力"
                            },
                            {
                                "key": "本质",
                                "description": "键值对【问题，解决思路】"
                            },
                            {
                                "key": "模式",
                                "description": "可重复使用的套路"
                            }
                        ]
                    },
                    {
                        "name": "2.什么是面向对象设计？",
                        "blocks": [
                            {
                                "key": "面向对象",
                                "description": "把职责封装到每个类中，让它们分工协作，最终完成需求"
                            },
                            {
                                "key": "设计",
                                "description": "思考出各种可能的分工协作方式，分析优劣后、选择最合适的"
                            }
                        ]
                    },
                    {
                        "name": "3.面向对象设计模式",
                        "blocks": [
                            {
                                "key": "背景",
                                "description": "任何问题，都在特定背景下产生"
                            },
                            {
                                "key": "需求",
                                "description": "要达成的目标"
                            },
                            {
                                "key": "描述解决思路",
                                "description": "uml最直观 / 文字说明核心思路"
                            },
                            {
                                "key": "效果",
                                "description": "分析得失"
                            },
                            {
                                "key": "命名",
                                "description": "方便记忆和沟通"
                            }
                        ]
                    }
                ]
            },
            {
                "name": "二、面向对象的手段",
                "sections": [
                    {
                        "name": "1.封装",
                        "blocks": [
                            {
                                "key": "隐藏内部实现",
                                "description": "最少知识原则，仅暴露必要的信息"
                            },
                            {
                                "key": "提升抽象级别",
                                "description": "不再关注细节，节省脑力"
                            }
                        ]
                    },
                    {
                        "name": "2.继承",
                        "blocks": [
                            {
                                "key": "复用",
                                "description": "物理上，复用已有的代码"
                            },
                            {
                                "key": "扩展",
                                "description": "逻辑上，（站在巨人的肩膀上）扩展现有的逻辑"
                            }
                        ]
                    },
                    {
                        "name": "3.多态",
                        "blocks": [
                            {
                                "key": "多种实现",
                                "description": "一个接口，有多种实现"
                            },
                            {
                                "key": "方法抽象",
                                "description": "一个接口，（像变量一样）指代多个方法"
                            }
                        ]
                    },
                    {
                        "name": "4.对象组合",
                        "blocks": [
                            {
                                "key": "与继承相似",
                                "description": "都是复用和扩展"
                            },
                            {
                                "key": "与继承不同",
                                "description": "继承描述的是同类 / 对象组合描述的是整体与局部"
                            }
                        ]
                    }
                ]
            },
            {
                "name": "三、面向对象设计原则",
                "sections": [
                    {
                        "name": "1.单一职责",
                        "blocks": [
                            {
                                "key": "",
                                "description": "一个类只有一个职责"
                            },
                            {
                                "key": "说明",
                                "description": "是唯一引起类改变的原因，也是它存在的意义"
                            }
                        ]
                    },
                    {
                        "name": "2.开闭",
                        "blocks": [
                            {
                                "key": "",
                                "description": "可以增加逻辑，不应修改逻辑"
                            },
                            {
                                "key": "说明",
                                "description": "不是说不能修改已有逻辑，而是设计的足够好，不需要（因为需求变更）修改现有逻辑"
                            }
                        ]
                    },
                    {
                        "name": "3.里氏替换",
                        "blocks": [
                            {
                                "key": "",
                                "description": "父类的对象，可被子类对象替换 / 接口可被它的实现类替换"
                            },
                            {
                                "key": "说明",
                                "description": "抽象 要被 具体实现 来替换"
                            }
                        ]
                    },
                    {
                        "name": "4.依赖倒置",
                        "blocks": [
                            {
                                "key": "",
                                "description": "对抽象编程，而不对具体实现编程"
                            },
                            {
                                "key": "说明1",
                                "description": "降低程序的耦合性，且分清了主次（抽象就是框架，具体实现成了填充物）"
                            },
                            {
                                "key": "说明2",
                                "description": "是一种编程思路，从大处着眼（定义抽象），从小处着手（具体实现）"
                            }
                        ]
                    },
                    {
                        "name": "5.接口隔离",
                        "blocks": [
                            {
                                "key": "",
                                "description": "保持职责单一，包含较少的方法"
                            },
                            {
                                "key": "说明1",
                                "description": "包含的方法过多，会迫使具体类实现无用的方法"
                            },
                            {
                                "key": "说明2",
                                "description": "职责清晰，才好分配；职责含糊，分工就混乱"
                            }
                        ]
                    }
                ]
            },
            {
                "name": "四、面向对象设计模式",
                "sections": [
                    {
                        "name": "1.目标",
                        "blocks": [
                            {
                                "key": "可维护性",
                                "description": "代码结构逻辑清晰、方便管理"
                            },
                            {
                                "key": "可扩展性",
                                "description": "不修改已有逻辑，容易扩展新的逻辑"
                            }
                        ]
                    },
                    {
                        "name": "2.手段",
                        "blocks": [
                            {
                                "key": "抽象扩展点",
                                "description": "利用继承机制，将多种可能情况抽象成父类或接口"
                            },
                            {
                                "key": "封装变化点",
                                "description": "增加中间层，解耦依赖关系（A -> 中间层 -> B），同时将变化封装到了中间层"
                            },
                            {
                                "key": "控制权转移",
                                "description": "把所依赖对象，暴露成外部参数，就把对它的控制权转移到了外部（与'延迟创建'相反）"
                            },
                            {
                                "key": "延迟创建",
                                "description": "把所依赖对象，从外部参数变成内部成员，在使用时才创建（与'控制权转移'相反）"
                            },
                            {
                                "key": "想象力",
                                "description": "无论采取何种手段，从宏观层面看：都是构思出各种角色，通过合理组织，使它们仅通过各司其职，就能协作完成软件的整体目标（这就像是中医和西医的不同思维方式）"
                            }
                        ]
                    },
                    {
                        "name": "3.发展",
                        "blocks": [
                            {
                                "key": "学习",
                                "description": "现有设计模式是前人总结的成果，应好好学习和利用"
                            },
                            {
                                "key": "进步",
                                "description": "设计模式的本质是：根据面向对象设计原则，合理封装变化点。按照这个原则，未来可以创造更多的模式"
                            }
                        ]
                    },
                    {
                        "name": "4.分类",
                        "blocks": [
                            {
                                "key": "创建型模式",
                                "description": "解决 对象的创建"
                            },
                            {
                                "key": "结构型模式",
                                "description": "解决 类的结构设计"
                            },
                            {
                                "key": "行为型模式",
                                "description": "解决 对象协作时的职责分配"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    "注释": [
        "1.软件开发的特点和致命弱点就是需求变化，导致程序不断的修改，牵一发而动全身，不仅工作量大且容易造成出错返工；设计模式恰好针对这个问题，在需求获取和软件设计时，提前考虑需求和设计的变化点，对可能性大的变化点应用设计模式，这样就应对了变化",
        "2.软件管理的是逻辑，除了应对变化，设计模式的另一个作用是 良好的组织逻辑",
        "3.类比：这种解决问题的套路，有点像打拳（以养生为目的，可以打个太极拳套路；以搏击为目的，可以打个泰拳的套路；以表演为目的，可以打个艺术体操的套路）"
    ],
    "参考文献": [
    ]
}