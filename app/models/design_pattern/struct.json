{
    "题目": "结构型模式",
    "摘要": "解决设计类结构时遇到的问题",
    "关键字": "Adapter Bridge Composite Decorator Facade Proxy Flyweight",
    "正文": {
        "chapters": [
            {
                "name": "一、Adapter",
                "sections": [
                    {
                        "name": "1.问题",
                        "blocks": [
                            {
                                "key": "想要复用",
                                "description": "已有组件中存在可复用的逻辑"
                            },
                            {
                                "key": "无法直接使用",
                                "description": "已有组件的接口 与 正在使用的接口 不同"
                            }
                        ]
                    },
                    {
                        "name": "2.思路",
                        "blocks": [
                            {
                                "key": "接口转换",
                                "description": "调用已有组件，实现现有接口"
                            },
                            {
                                "key": "增加中间层",
                                "description": "创建新的类，封装接口转换逻辑"
                            }
                        ]
                    },
                    {
                        "name": "3.代码示例",
                        "codeSnippets": [
                            {
                                "description": "",
                                "url": "/codeSnippets/design_pattern/adapter.java"
                            }
                        ]
                    },
                    {
                        "name": "4.模型图",
                        "images": [
                            {
                                "alt": "在不改变原有实现的基础上，将原先不兼容的接口转换为兼容的接口",
                                "url": "/images/design_pattern/adapter.png"
                            }
                        ]
                    }
                ]
            },
            {
                "name": "二、Bridge",
                "sections": [
                    {
                        "name": "1.问题",
                        "blocks": [
                            {
                                "key": "属性是扩展点",
                                "description": "需要修改类结构"
                            },
                            {
                                "key": "行为逻辑是变化点",
                                "description": "需要修改方法的实现代码"
                            }
                        ]
                    },
                    {
                        "name": "2.思路",
                        "blocks": [
                            {
                                "key": "抽象类",
                                "description": "通过类继承，解决属性的扩展问题"
                            },
                            {
                                "key": "分离行为的实现",
                                "description": "描述一个行为类，专门用于实现类的行为逻辑"
                            },
                            {
                                "key": "抽象行为类",
                                "description": "行为是变化点，所以需要继承机制，描述多种行为逻辑"
                            },
                            {
                                "key": "桥接",
                                "description": "将抽象行为，组合到抽象类中，将各自变化的属性和行为衔接起来"
                            }
                        ]
                    },
                    {
                        "name": "3.代码示例",
                        "codeSnippets": [
                            {
                                "description": "bridge负责自己的属性变化，行为逻辑就委托给behavior来实现",
                                "url": "/codeSnippets/design_pattern/bridge.java"
                            }
                        ]
                    },
                    {
                        "name": "4.模型图",
                        "images": [
                            {
                                "alt": "分离抽象与实现，使他们可以各自独立的变化",
                                "url": "/images/design_pattern/bridge.png"
                            }
                        ]
                    }
                ]
            },
            {
                "name": "三、Composite",
                "sections": [
                    {
                        "name": "1.问题",
                        "blocks": [
                            {
                                "key": "容器对和元素的接口不同",
                                "description": "需要先判断类型，然后分别调用不同的接口"
                            }
                        ]
                    },
                    {
                        "name": "2.思路",
                        "blocks": [
                            {
                                "key": "组合成树形结构",
                                "description": "描述 <整体-部分> 这个结构"
                            },
                            {
                                "key": "统一接口",
                                "description": "使用时无需判断，保持一致性"
                            }
                        ]
                    },
                    {
                        "name": "3.代码示例",
                        "codeSnippets": [
                            {
                                "description": "将容器对象的操作递归到基本对象上",
                                "url": "/codeSnippets/design_pattern/composite.java"
                            }
                        ]
                    },
                    {
                        "name": "4.模型图",
                        "images": [
                            {
                                "alt": "忽略容器与元素的不同，统一的使用所有对象",
                                "url": "/images/design_pattern/composite.png"
                            }
                        ]
                    }
                ]
            },
            {
                "name": "四、Decorator",
                "sections": [
                    {
                        "name": "1.问题",
                        "blocks": [
                            {
                                "key": "属性是扩展点",
                                "description": "需要修改类结构"
                            },
                            {
                                "key": "行为逻辑需要扩展附加功能",
                                "description": "需要在方法内增加代码"
                            },
                            {
                                "key": "扩展的附加功能个数很多",
                                "description": "需要针对每种排列组合，扩展相应的类，造成类爆炸"
                            },
                            {
                                "key": "有点像AOP",
                                "description": "在指定方法（前/后）添加代码"
                            }
                        ]
                    },
                    {
                        "name": "2.思路",
                        "blocks": [
                            {
                                "key": "抽象类",
                                "description": "通过类继承，解决属性的扩展问题"
                            },
                            {
                                "key": "X功能附加到Y对象",
                                "description": "描述一个装饰类，专门用于将功能附加到指定对象上"
                            },
                            {
                                "key": "装饰类设计",
                                "description": "对外表现为原始类，因此要继承原始类；对内要附加的对象类型是原始类，所以要组合一个原始类对象；由于是对指定对象进行附加，所以类的方法全部由指定对象来实现"
                            },
                            {
                                "key": "抽象装饰类",
                                "description": "附加功能是变化点，所以需要继承机制，描述多种附加功能"
                            }
                        ]
                    },
                    {
                        "name": "3.代码示例",
                        "codeSnippets": [
                            {
                                "description": "",
                                "url": "/codeSnippets/design_pattern/decorator.java"
                            }
                        ]
                    },
                    {
                        "name": "4.模型图",
                        "images": [
                            {
                                "alt": "不改变原始类，动态的给对象的行为附加一种或多种功能",
                                "url": "/images/design_pattern/decorator.png"
                            }
                        ]
                    }
                ]
            },
            {
                "name": "五、Facade",
                "sections": [
                    {
                        "name": "1.问题",
                        "blocks": [
                            {
                                "key": "子系统复杂",
                                "description": "使用前，需要了解子系统的全部细节（好烧脑）"
                            }
                        ]
                    },
                    {
                        "name": "2.思路",
                        "blocks": [
                            {
                                "key": "最小知识原则",
                                "description": "与了解子系统的人沟通，说明自己的需求，约定一个够自己使用的接口"
                            },
                            {
                                "key": "实现接口",
                                "description": "子系统人员提供一个类，实现该接口（这个类就像子系统的外观，所以叫外观类）"
                            }
                        ]
                    },
                    {
                        "name": "3.代码示例",
                        "codeSnippets": [
                            {
                                "description": "外观类为子系统提供一个简单的对外接口",
                                "url": "/codeSnippets/design_pattern/facade.java"
                            }
                        ]
                    },
                    {
                        "name": "4.模型图",
                        "images": [
                            {
                                "alt": "让子系统更加容易使用",
                                "url": "/images/design_pattern/facade.png"
                            }
                        ]
                    }
                ]
            },
            {
                "name": "六、Proxy",
                "sections": [
                    {
                        "name": "1.问题",
                        "blocks": [
                            {
                                "key": "类的某些参数需要固定或隐藏",
                                "description": "如：系统对外的邮箱，给各个组件提供邮件服务，但密码要隐藏；再比如：现实中，跟经纪人谈商业合作，不直接接触本人"
                            },
                            {
                                "key": "无法直接使用的类",
                                "description": "如：WebService，无法直接使用远程服务器上的对象"
                            }
                        ]
                    },
                    {
                        "name": "2.思路",
                        "blocks": [
                            {
                                "key": "增加中间层",
                                "description": "解耦依赖关系"
                            }
                        ]
                    },
                    {
                        "name": "3.代码示例",
                        "codeSnippets": [
                            {
                                "description": "把原始对象包裹一下",
                                "url": "/codeSnippets/design_pattern/proxy.java"
                            }
                        ]
                    },
                    {
                        "name": "4.模型图",
                        "images": [
                            {
                                "alt": "提供一种代理以控制对这个对象的访问",
                                "url": "/images/design_pattern/proxy.png"
                            }
                        ]
                    }
                ]
            },
            {
                "name": "七、Flyweight",
                "sections": [
                    {
                        "name": "1.问题",
                        "blocks": [
                            {
                                "key": "大量相似的对象",
                                "description": "消耗过多的内存"
                            }
                        ]
                    },
                    {
                        "name": "2.思路",
                        "blocks": [
                            {
                                "key": "共用相同的部分",
                                "description": "单另存储一份数据，所有对象引用它"
                            },
                            {
                                "key": "识别相同的部分",
                                "description": "内蕴状态：不随环境改变的属性"
                            },
                            {
                                "key": "识别不同的部分",
                                "description": "外蕴状态：随环境改变的属性"
                            },
                            {
                                "key": "管理共享的对象",
                                "description": "描述一个享元工厂，共享部分用键值对来存储，根据键返回享元对象"
                            }
                        ]
                    },
                    {
                        "name": "3.代码示例",
                        "codeSnippets": [
                            {
                                "description": "",
                                "url": "/codeSnippets/design_pattern/flyweight.java"
                            }
                        ]
                    },
                    {
                        "name": "4.模型图",
                        "images": [
                            {
                                "alt": "运用共享技术有效地支持大量细粒度的对象",
                                "url": "/images/design_pattern/flyweight.png"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    "注释": [
        "1.总的思路：不从头设计类结构，复用现有的类",
        ""
    ],
    "参考文献": [
    ]
}