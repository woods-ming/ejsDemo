{
    "题目": "行为型模式",
    "摘要": "解决类在协作时遇到的问题",
    "关键字": "ChainOfResponsibility Command Interpreter Iterator Mediator Memento Observer State Strategy TemplateMethod Visitor",
    "正文": {
        "chapters": [
            {
                "name": "一、Chain of Responsibility",
                "sections": [
                    {
                        "name": "1.需求",
                        "blocks": [
                            {
                                "key": "多个角色",
                                "description": "都有处理同一类事情的职责"
                            },
                            {
                                "key": "能力不同",
                                "description": "有的角色只能处理简单问题，有的可以处理复杂问题"
                            },
                            {
                                "key": "好钢要用在刀刃上",
                                "description": "能力强的角色可以处理所有问题，处理简单问题是对它的浪费"
                            },
                            {
                                "key": "例子1",
                                "description": "客户把问题反馈给运维，运维如果处理不了就反馈给研发，研发如果处理不了就反馈给项目经理"
                            },
                            {
                                "key": "例子2",
                                "description": "分级诊疗：小病上社区，大病去医院"
                            }
                        ]
                    },
                    {
                        "name": "2.解决思路",
                        "blocks": [
                            {
                                "key": "所有角色组成一个团队",
                                "description": "都有处理问题的职责"
                            },
                            {
                                "key": "按能力排次序",
                                "description": "弱的排前面，强的压阵"
                            },
                            {
                                "key": "相互自动连接",
                                "description": "弱的处理不了，自动把职责交给比它强的"
                            }
                        ]
                    },
                    {
                        "name": "3.代码示例",
                        "codeSnippets": [
                            {
                                "description": "",
                                "url": "/codeSnippets/design_pattern/chainOfResponsibility.java"
                            }
                        ]
                    },
                    {
                        "name": "4.模型图",
                        "images": [
                            {
                                "alt": "",
                                "url": "/images/design_pattern/chainOfResponsibility.png"
                            }
                        ]
                    }
                ]
            },
            {
                "name": "二、Command",
                "sections": [
                    {
                        "name": "1.需求",
                        "blocks": [
                            {
                                "key": "一个动作",
                                "description": "由其所有者执行，转瞬即逝"
                            },
                            {
                                "key": "希望（像东西一样）",
                                "description": "能够储存或传输，用的时候再执行"
                            },
                            {
                                "key": "例子1",
                                "description": "支票可以传递、存储，直到需要的时候才真正执行取钱动作"
                            },
                            {
                                "key": "例子2",
                                "description": "回调函数作为另一个函数的参数被传入，并在其内部逻辑中被调用"
                            }
                        ]
                    },
                    {
                        "name": "2.解决思路",
                        "blocks": [
                            {
                                "key": "强化命令执行",
                                "description": "定义命令类，专门负责执行命令"
                            },
                            {
                                "key": "弱化动作主体",
                                "description": "将实现类作为执行命令的参数"
                            }
                        ]
                    },
                    {
                        "name": "3.代码示例",
                        "codeSnippets": [
                            {
                                "description": "",
                                "url": "/codeSnippets/design_pattern/command.java"
                            }
                        ]
                    },
                    {
                        "name": "4.模型图",
                        "images": [
                            {
                                "alt": "",
                                "url": "/images/design_pattern/command.png"
                            }
                        ]
                    }
                ]
            },
            {
                "name": "三、Interpreter",
                "sections": [
                    {
                        "name": "1.需求",
                        "blocks": [
                            {
                                "key": "问题千变万化",
                                "description": "不能一劳永逸的处理所有情况"
                            },
                            {
                                "key": "基本思路是固定的",
                                "description": "可通过组合变化，处理所有问题"
                            },
                            {
                                "key": "例子1",
                                "description": "数据库查询，不同业务的数据结构不同，永远处理不完；但就是筛选、投影等几个步骤"
                            },
                            {
                                "key": "例子2",
                                "description": "设备说明书，通过基本操作应对各种情况"
                            }
                        ]
                    },
                    {
                        "name": "2.解决思路",
                        "blocks": [
                            {
                                "key": "动静分离",
                                "description": "将逻辑分离为描述和实现2部分"
                            },
                            {
                                "key": "定义描述语法",
                                "description": "用来表示逻辑（就像语言中的动词、名词、形容词，要方便表达）"
                            },
                            {
                                "key": "定义解释器",
                                "description": "用来翻译，将逻辑从表达层面转换到实现层面"
                            }
                        ]
                    },
                    {
                        "name": "3.代码示例",
                        "codeSnippets": [
                            {
                                "description": "",
                                "url": "/codeSnippets/design_pattern/interpreter.java"
                            }
                        ]
                    },
                    {
                        "name": "4.模型图",
                        "images": [
                            {
                                "alt": "",
                                "url": "/images/design_pattern/interpreter.png"
                            }
                        ]
                    }
                ]
            },
            {
                "name": "四、Iterator",
                "sections": [
                    {
                        "name": "1.需求",
                        "blocks": [
                            {
                                "key": "遍历集合",
                                "description": "把所有子元素过一遍"
                            },
                            {
                                "key": "标准化",
                                "description": "不想使用千奇百怪的遍历方式"
                            }
                        ]
                    },
                    {
                        "name": "2.解决思路",
                        "blocks": [
                            {
                                "key": "定义遍历接口",
                                "description": "将遍历行为标准化"
                            },
                            {
                                "key": "职责分离",
                                "description": "提供一个迭代器，由它实现遍历接口（专门负责遍历子元素）"
                            }
                        ]
                    },
                    {
                        "name": "3.代码示例",
                        "codeSnippets": [
                            {
                                "description": "",
                                "url": "/codeSnippets/design_pattern/iterator.java"
                            }
                        ]
                    },
                    {
                        "name": "4.模型图",
                        "images": [
                            {
                                "alt": "",
                                "url": "/images/design_pattern/iterator.png"
                            }
                        ]
                    }
                ]
            },
            {
                "name": "五、Mediator",
                "sections": [
                    {
                        "name": "1.需求",
                        "blocks": [
                            {
                                "key": "多个角色之间",
                                "description": "需要相互协助"
                            },
                            {
                                "key": "对于其中任意一个角色来说",
                                "description": "认识其它角色要花费大力气"
                            },
                            {
                                "key": "例子1",
                                "description": "消费者和商家互相需要对方的产品或钱，由天猫充当中介，让他们可以不用认识就能交换到对方的物品"
                            }
                        ]
                    },  

                    {
                        "name": "2.解决思路",
                        "blocks": [
                            {
                                "key": "增加中间层",
                                "description": "封装每个角色对外提供的帮助"
                            },
                            {
                                "key": "有事找中介",
                                "description": "某个角色需要帮助时，不再用寻找另一个角色，中介就可以间接提供帮助"
                            }
                        ]
                    },
                    {
                        "name": "3.代码示例",
                        "codeSnippets": [
                            {
                                "description": "",
                                "url": "/codeSnippets/design_pattern/mediator.java"
                            }
                        ]
                    },
                    {
                        "name": "4.模型图",
                        "images": [
                            {
                                "alt": "",
                                "url": "/images/design_pattern/mediator.png"
                            }
                        ]
                    }
                ]
            },
            {
                "name": "六、Memento",
                "sections": [
                    {
                        "name": "1.需求",
                        "blocks": [
                            {
                                "key": "随时备份",
                                "description": "某个时刻的状态，方便以后恢复"
                            },
                            {
                                "key": "隐藏镜像",
                                "description": "不想把隐私暴露给别人"
                            }
                        ]
                    },
                    {
                        "name": "2.解决思路",
                        "blocks": [
                            {
                                "key": "交给信赖的人",
                                "description": "新建一个备忘录角色，专门用来备份/还原"
                            },
                            {
                                "key": "守口如瓶",
                                "description": "要把备份隐藏起来，只让我来取"
                            }
                        ]
                    },
                    {
                        "name": "3.代码示例",
                        "codeSnippets": [
                            {
                                "description": "",
                                "url": "/codeSnippets/design_pattern/memento.java"
                            }
                        ]
                    },
                    {
                        "name": "4.模型图",
                        "images": [
                            {
                                "alt": "",
                                "url": "/images/design_pattern/memento.png"
                            }
                        ]
                    }
                ]
            },
            {
                "name": "七、Observer",
                "sections": [
                    {
                        "name": "1.需求",
                        "blocks": [
                            {
                                "key": "当事件发生时",
                                "description": "所有关注者即刻做出反应"
                            },
                            {
                                "key": "例子1",
                                "description": "红灯亮了，所有车辆、行人停在斑马线前"
                            },
                            {
                                "key": "例子2",
                                "description": "页面加载之前、之后，提供的hook"
                            }
                        ]
                    },
                    {
                        "name": "2.解决思路",
                        "blocks": [
                            {
                                "key": "本质",
                                "description": "被观察者发出消息，逐一通知所有关注者，让它们采取行动"
                            },
                            {
                                "key": "事件订阅",
                                "description": "将关注者要采取的行动，提前告诉被观察者，事件发生后自动遍历调用"
                            }
                        ]
                    },
                    {
                        "name": "3.代码示例",
                        "codeSnippets": [
                            {
                                "description": "",
                                "url": "/codeSnippets/design_pattern/observer.java"
                            }
                        ]
                    },
                    {
                        "name": "4.模型图",
                        "images": [
                            {
                                "alt": "",
                                "url": "/images/design_pattern/observer.png"
                            }
                        ]
                    }
                ]
            },
            {
                "name": "八、State",
                "sections": [
                    {
                        "name": "1.需求",
                        "blocks": [
                            {
                                "key": "不同的状态下",
                                "description": "有不同的行为"
                            },
                            {
                                "key": "例子1",
                                "description": "手机的开机按钮，关机状态时行为是开机，开机状态下行为是关机"
                            }
                        ]
                    },
                    {
                        "name": "2.解决思路",
                        "blocks": [
                            {
                                "key": "把状态分离出来",
                                "description": "描述一个状态类"
                            },
                            {
                                "key": "描述各种状态",
                                "description": "每个状态类都要继承自抽象状态类，并完成相应状态下的行为逻辑"
                            }
                        ]
                    },
                    {
                        "name": "3.代码示例",
                        "codeSnippets": [
                            {
                                "description": "",
                                "url": "/codeSnippets/design_pattern/state.java"
                            }
                        ]
                    },
                    {
                        "name": "4.模型图",
                        "images": [
                            {
                                "alt": "",
                                "url": "/images/design_pattern/state.png"
                            }
                        ]
                    }
                ]
            },
            {
                "name": "九、Strategy",
                "sections": [
                    {
                        "name": "1.需求",
                        "blocks": [
                            {
                                "key": "一个问题有多种解决办法",
                                "description": "希望可以随时更换"
                            },
                            {
                                "key": "例子1",
                                "description": "上班，可以骑自行车，也可以开车，根据心情去选择"
                            },
                            {
                                "key": "例子2",
                                "description": "实现排序，可以用冒泡算法，也可以用二分法等，都实现出来，根据实际使用效果来替换"
                            }
                        ]
                    },
                    {
                        "name": "2.解决思路",
                        "blocks": [
                            {
                                "key": "将算法分离",
                                "description": "定义成接口"
                            },
                            {
                                "key": "实现各种算法",
                                "description": "每种算法都要按照接口来实现"
                            }
                        ]
                    },
                    {
                        "name": "3.代码示例",
                        "codeSnippets": [
                            {
                                "description": "",
                                "url": "/codeSnippets/design_pattern/strategy.java"
                            }
                        ]
                    },
                    {
                        "name": "4.模型图",
                        "images": [
                            {
                                "alt": "",
                                "url": "/images/design_pattern/strategy.png"
                            }
                        ]
                    }
                ]
            },
            {
                "name": "十、Template Method",
                "sections": [
                    {
                        "name": "1.需求",
                        "blocks": [
                            {
                                "key": "某件工作有这样的特点",
                                "description": "无论是哪种解决方案，流程骨架固定不变，仅有某些步骤有些差别"
                            },
                            {
                                "key": "例子1",
                                "description": "铁打的营盘，流水的兵"
                            },
                            {
                                "key": "例子2",
                                "description": "web请求的生命周期固定，框架在在请求处理前后留出2个hook，程序员可以在此处实现不同的逻辑"
                            }
                        ]
                    },
                    {
                        "name": "2.解决思路",
                        "blocks": [
                            {
                                "key": "模版思维",
                                "description": "整体描述出来，不变的固定在那里，变的部分放个'占位符'"
                            },
                            {
                                "key": "实现具体解决方案",
                                "description": "就是填充'占位符'，通过继承和方法覆盖即可完成"
                            }
                        ]
                    },
                    {
                        "name": "3.代码示例",
                        "codeSnippets": [
                            {
                                "description": "",
                                "url": "/codeSnippets/design_pattern/templateMethod.java"
                            }
                        ]
                    },
                    {
                        "name": "4.模型图",
                        "images": [
                            {
                                "alt": "",
                                "url": "/images/design_pattern/templateMethod.png"
                            }
                        ]
                    }
                ]
            },
            {
                "name": "十一、Visitor",
                "sections": [
                    {
                        "name": "1.需求",
                        "blocks": [
                            {
                                "key": "角色的职责",
                                "description": "将来需要扩展，但目前还能应付"
                            },
                            {
                                "key": "新职责的需求",
                                "description": "外包给别人，但对外还是我做的"
                            },
                            {
                                "key": "例子1",
                                "description": "研发团队接了个项目，做完后客户突然要求整个ppt文案给培训，大家都不擅长，干脆外包给一个文科尖子生，对外还是我们做的"
                            }
                        ]
                    },
                    {
                        "name": "2.解决思路",
                        "blocks": [
                            {
                                "key": "预留职责",
                                "description": "定义一个accept方法接受外包产品"
                            },
                            {
                                "key": "职责交接",
                                "description": "定义visitor实现新职责，角色需要时，从这里'拿'逻辑"
                            }
                        ]
                    },
                    {
                        "name": "3.代码示例",
                        "codeSnippets": [
                            {
                                "description": "",
                                "url": "/codeSnippets/design_pattern/visitor.java"
                            }
                        ]
                    },
                    {
                        "name": "4.模型图",
                        "images": [
                            {
                                "alt": "",
                                "url": "/images/design_pattern/visitor.png"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    "注释": [
        "1.",
        "2."
    ],
    "参考文献": [
    ]
}